from selenium import webdriver
from selenium.webdriver.common.keys import Keys
from auth_data import username, password
import time
import random
from selenium.common.exceptions import NoSuchElementException
import requests


class instagramBot():

    def __init__(self, username, password):
        self.username = username
        self.password = password
        self.browser = webdriver.Chrome('../chromedriver/chromedriver.exe')


    def close_browser(self):
        self.browser.close()
        self.browser.quit()


    def login(self):
        browser = self.browser
        browser.get('https://www.instagram.com')
        time.sleep(random.randrange(3, 5))

        username_input = browser.find_element_by_name('username')
        username_input.clear()
        username_input.send_keys(username)

        time.sleep(2)

        password_input = browser.find_element_by_name('password')
        password_input.clear()
        password_input.send_keys(password)

        password_input.send_keys(Keys.ENTER)
        time.sleep(6)
    def xpath_exists(self, url):

        browser = self.browser
        try:
            browser.find_element_by_xpath(url)
            exist = True
        except NoSuchElementException:
            exist = False
        return exist

    def get_on_posts_url(self, userpage):
        browser = self.browser
        browser.get(userpage)
        time.sleep(4)

        wrong_userpage = "/html/body/div[1]/section/main/div/h2"
        if self.xpath_exists(wrong_userpage):
            print("Такого пользователя не существует, проверьте URL")
            self.close_browser()
        else:
            print("Пользователь успешно найден, ставим лайки!")
            time.sleep(2)

            posts_count = int(browser.find_element_by_xpath(
                "/html/body/div[1]/section/main/div/header/section/ul/li[1]/span/span").text)
            loops_count = int(posts_count / 60)
            print(loops_count)

            posts_urls = []
            for i in range(0, loops_count):
                hrefs = browser.find_elements_by_tag_name('a')
                hrefs = [item.get_attribute('href') for item in hrefs if "/p/" in item.get_attribute('href')]

                for href in hrefs:
                    posts_urls.append(href)

                browser.execute_script("window.scrollTo(0, document.body.scrollHeight);")
                time.sleep(random.randrange(2, 4))
                print(f"Итерация #{i}")

            file_name = userpage.split("/")[-2]

            with open(f'{file_name}.txt', 'a') as file:
                for post_url in posts_urls:
                    file.write(post_url + "\n")

            set_posts_urls = set(posts_urls)
            set_posts_urls = list(set_posts_urls)

            with open(f'{file_name}_set.txt', 'a') as file:
                for post_url in set_posts_urls:
                    file.write(post_url + '\n')


    def download_content(self, userpage):
        browser = self.browser
        self.get_on_posts_url(userpage)
        file_name = userpage.split("/")[-2]
        time.sleep(4)
        browser.get(userpage)
        time.sleep(4)

        img_and_videos_src_url = []

        with open(f'{file_name}_set.txt') as file:
            urls_list = file.readlines()

            for post_url in urls_list[0:10]:
                try:
                    browser.get(post_url)
                    time.sleep(4)

                    img_src = '/html/body/div[6]/div[2]/div/article/div/div[1]/div/div/div[1]/img'
                    video_src = '/html/body/div[6]/div[2]/div/article/div/div[1]/div/div/div/div/div/video'

                    if self.xpath_exists(img_src):
                        img_src_url = browser.find_element_by_xpath(img_src).get_attribute("src")
                        img_and_videos_src_url.append(img_src_url)
                        post_id = post_id.split("/")[-2]

                        #coxp изобр
                        get_img = requests.get(img_src_url)
                        with open(f"{post_id}_img.jpg", "wb") as img_file:
                            img_file.write(get_img.content)



                    elif self.xpath_exists(video_src):
                            video_src_url = browser.find_element_by_xpath(video_src).get_attribute("src")
                            img_and_videos_src_url.append(video_src_url)

                            # coxp video
                            get_video = requests.get(video_src_url, stream=True)
                            with open(f"{post_id}_video.mp4", "wb") as video_file:
                                for chunk in get_video.iter.content(chunk_size = 1024 * 1024):
                                    if chunk:
                                        video_file.write(chunk)
                    else:
                        #print("Oops, 4to to poshlo po pizde, nado ispravit!!!")
                        img_and_videos_src_url.append(f"{post_url} нет ссылки!")
                    print(f"Контент из поста {post_url} успешн скачан!!!")
                except Exception as ex:
                    print(ex)
                    self.close_browser()

            self.close_browser()
        with open('img_and_videos_src_url','a') as file:
            for i in img_and_videos_src_url:
                file.write(i + "\n")


    def put_many_likes(self, userpage):

        browser = self.browser
        self.get_on_posts_url(userpage)
        file_name = userpage.split("/")[-2]
        time.sleep(4)
        browser.get(userpage)
        time.sleep(4)

        with open(f'{file_name}_set.txt') as file:
            urls_list = file.readlines()

            for post_url in urls_list[0:6]:
                try:
                    browser.get(post_url)
                    time.sleep(2)

                    like_button = "/html/body/div[1]/section/main/div/div/article/div[3]/section[1]/span[1]/button"
                    browser.find_element_by_xpath(like_button).click()
                    # time.sleep(random.randrange(80, 100))
                    time.sleep(2)

                    print(f"Лайк на пост: {post_url} успешно поставлен!")
                except Exception as ex:
                    print(ex)
                    self.close_browser()

        self.close_browser()



my_bot = instagramBot(username, password)
my_bot.login()
my_bot.download_content("https://www.instagram.com/rbabadjanik/")
